{"version":3,"sources":["store/Cart/actions.js","components/notification/Notification.js","components/productCard/ProductCard.js","components/errorBoundries/ErrorBoundries.js","pages/ProductList/ProductList.js"],"names":["addItemToCart","payload","type","types","deleteCartItem","IncreaseCartItem","DecreaseCartItem","submitUserOrder","getTotal","open","slug","message","title","notification","description","duration","placement","ProductCard","React","Component","product","addToCart","price","image","category","id","cover","to","className","src","alt","bordered","style","width","margin","ShoppingCartOutlined","onClick","fontSize","color","ProductList","data","useSelector","state","products","dispatch","useDispatch","useEffect","allProductsRequest","map","item","handler"],"mappings":"sHAAA,wNAEaA,EAAgB,SAACC,GAAD,MAAc,CACzCC,KAAMC,IACNF,YAEWG,EAAiB,SAACH,GAAD,MAAc,CAC1CC,KAAMC,IACNF,YAGWI,EAAmB,SAACJ,GAAD,MAAc,CAC5CC,KAAMC,IACNF,YAEWK,EAAmB,SAACL,GAAD,MAAc,CAC5CC,KAAMC,IACNF,YAEWM,EAAkB,SAACN,GAAD,MAAc,CAC3CC,KAAMC,IACNF,YAGWO,EAAW,iBAAO,CAC7BN,KAAMC,O,qFCvBMM,EAAO,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MACpCC,IAAaJ,KAAK,CAChBE,QAASD,EACTI,YAAY,GAAD,OAAKF,EAAL,YAAcD,GACzBI,SAAU,EACVC,UAAW,e,gKCyBAC,GC/BoBC,IAAMC,UDKrB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACtBC,EAAsCF,EAAtCE,MAAOC,EAA+BH,EAA/BG,MAAOC,EAAwBJ,EAAxBI,SAAUZ,EAAcQ,EAAdR,MAAOa,EAAOL,EAAPK,GACvC,OACE,eAAC,IAAD,CACEC,MACE,cAAC,IAAD,CAAMC,GAAE,oBAAeF,GAAMG,UAAU,gBAAvC,SACE,qBAAKC,IAAKN,EAAOO,IAAI,oBAGzBC,UAAU,EACVC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,eAP/B,UASE,oBAAGN,UAAU,iCAAb,UACE,iCAAShB,IACT,cAACuB,EAAA,EAAD,CACEC,QAASf,EACTW,MAAO,CAAEK,SAAU,OAAQC,MAAO,cAGtC,oBAAGV,UAAU,iCAAb,UACE,iCAASJ,IACT,iCAASF,Y,kCEYDiB,UA/BK,WAAO,IAClBC,EAASC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAApCH,KACFI,EAAWC,cAaf,OAHAC,qBAAU,WACRF,EAASG,iBACR,IAED,qBAAKnB,UAAU,yBAAf,SACGY,GACC,qBAAKZ,UAAU,+CAAf,SACGY,EAAKQ,KAAI,SAACC,EAAMxB,GAAP,OACR,cAAC,EAAD,CAEAJ,UAAW,kBAnBR,SAAC4B,GACZxC,YAAK,CACHC,KAAM,mBACNE,MAAOqC,EAAKrC,MACZD,QACE,kDAEJiC,EAAS5C,YAAciD,IAYEC,CAAQD,IACzB7B,QAAS6B,GAHT,UACQxB,EADR","file":"static/js/9.34ca053f.chunk.js","sourcesContent":["import * as types from \"./types\";\n\nexport const addItemToCart = (payload) => ({\n  type: types.ADD_TO_CART,\n  payload,\n});\nexport const deleteCartItem = (payload) => ({\n  type: types.DELETE_ITEM,\n  payload,\n});\n\nexport const IncreaseCartItem = (payload) => ({\n  type: types.INCREASE_CART_ITEM,\n  payload,\n});\nexport const DecreaseCartItem = (payload) => ({\n  type: types.DECREASE_CART_ITEM,\n  payload,\n});\nexport const submitUserOrder = (payload) => ({\n  type: types.SUBMIT_ORDER,\n  payload\n});\n\nexport const getTotal = () => ({\n  type: types.TOTAL_PRICE\n});\n","import { notification } from 'antd';\n\nexport  const open = ({slug, message, title}) => {\n  notification.open({\n    message: slug,\n    description: `${title} ${message}`,\n    duration: 3,\n    placement: 'topRight',\n  });\n};\n\n\nexport const Notification = (props) => {\n\n  const openNotification = ({ message, title}) => {\n    notification.success({\n      message: 'ADD ITEM',\n      description: `${title} ${message}`,\n      duration: 3,\n      placement: 'topRight',\n    });\n  };\n\n  return (\n      <>\n          {props.children({ notifiy: openNotification })}\n      </>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"antd\";\nimport { ShoppingCartOutlined } from \"@ant-design/icons\";\nimport \"./ProductCard.scss\";\nimport { ErrorBoundary } from \"../errorBoundries/ErrorBoundries\";\nconst ProductCard = ({ product, addToCart }) => {\n  const { price, image, category, title, id } = product;\n  return (\n    <Card\n      cover={\n        <Link to={`/products/${id}`} className=\"product-image\">\n          <img src={image} alt=\"product-image\" />\n        </Link>\n      }\n      bordered={true}\n      style={{ width: 300, margin: \"0 5px 5px 0\" }}\n    >\n      <p className=\"d-flex justify-content-between\">\n        <strong>{title}</strong>\n        <ShoppingCartOutlined\n          onClick={addToCart}\n          style={{ fontSize: \"25px\", color: \"green\" }}\n        />\n      </p>\n      <p className=\"d-flex justify-content-between\">\n        <strong>{category}</strong>\n        <strong>{price}</strong>\n      </p>\n    </Card>\n  );\n};\nexport default ProductCard;\n","import React from 'react';\nexport class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n  \n    static getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return { hasError: true };\n    }\n  \n    componentDidCatch(error, errorInfo) {\n      // You can also log the error to an error reporting service\n      console.log(error, errorInfo);\n    }\n  \n    render() {\n      if (this.state.hasError) {\n        // You can render any custom fallback UI\n        return <h1>Something went wrong.</h1>;\n      }\n  \n      return this.props.children; \n    }\n  }","import React, { useEffect } from \"react\";\n\nimport ProductCard from \"../../components/productCard/ProductCard\";\nimport { allProductsRequest } from \"../../store/Product/actions\";\nimport { addItemToCart } from \"../../store/Cart/actions\";\nimport {  useSelector, useDispatch } from \"react-redux\";\nimport { open } from \"../../components/notification/Notification\";\n\nconst ProductList  = () => {\n  const { data } = useSelector(state => state.products)\n  const dispatch = useDispatch()\n const handler = (item) => {\n      open({\n        slug: \"Add Item To Cart\",\n        title: item.title,\n        message:\n          \"Your Item Added Successfully To Shopping Cart\",\n      });\n      dispatch(addItemToCart(item))\n  }\n    useEffect(() => {\n      dispatch(allProductsRequest())\n    }, [])\n    return (\n      <div className=\"product-list-container\">\n        {data && (\n          <div className=\"mt-2 d-flex flex-wrap justify-content-center\">\n            {data.map((item, id) => (\n              <ProductCard\n              key={`${id} id`}\n              addToCart={() => handler(item)}\n              product={item}\n            />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\nexport default (ProductList);\n"],"sourceRoot":""}