{"version":3,"sources":["store/Cart/actions.js","components/notification/Notification.js","components/productCard/ProductCard.js","pages/ProductList/ProductList.js"],"names":["addItemToCart","payload","type","types","deleteCartItem","IncreaseCartItem","DecreaseCartItem","submitUserOrder","getTotal","Notification","props","notification","useNotification","api","contextHolder","children","notifiy","message","title","success","description","duration","placement","ProductCard","product","addToCart","price","image","category","id","cover","to","className","src","alt","bordered","style","width","margin","onClick","a","ShoppingCartOutlined","fontSize","color","ProductList","state","disable","item","addItem","this","getProducts","products","items","map","React","Component","connect","data","cart","dispatch","allProductsRequest"],"mappings":"sHAAA,wNAEaA,EAAgB,SAACC,GAAD,MAAc,CACzCC,KAAMC,IACNF,YAEWG,EAAiB,SAACH,GAAD,MAAc,CAC1CC,KAAMC,IACNF,YAGWI,EAAmB,SAACJ,GAAD,MAAc,CAC5CC,KAAMC,IACNF,YAEWK,EAAmB,SAACL,GAAD,MAAc,CAC5CC,KAAMC,IACNF,YAEWM,EAAkB,SAACN,GAAD,MAAc,CAC3CC,KAAMC,IACNF,YAGWO,EAAW,iBAAO,CAC7BN,KAAMC,O,gGCxBKM,EAAe,SAACC,GAAW,IAAD,EACRC,IAAaC,kBADL,mBAC9BC,EAD8B,KACzBC,EADyB,KAYrC,OACI,qCACEA,EACGJ,EAAMK,SAAS,CAAEC,QAZD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MACnCL,EAAIM,QAAQ,CACVF,QAAS,WACTG,YAAY,GAAD,OAAKF,EAAL,YAAcD,GACzBI,SAAU,EACVC,UAAW,qB,kMCoCFC,EAvCK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACtBC,EAAsCF,EAAtCE,MAAOC,EAA+BH,EAA/BG,MAAOC,EAAwBJ,EAAxBI,SAAUV,EAAcM,EAAdN,MAAOW,EAAOL,EAAPK,GACvC,OACE,eAAC,IAAD,CACEC,MACE,cAAC,IAAD,CAAMC,GAAE,oBAAeF,GAAMG,UAAU,gBAAvC,SACE,qBAAKC,IAAKN,EAAOO,IAAI,oBAGzBC,UAAU,EACVC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,eAP/B,UASE,oBAAGN,UAAU,iCAAb,UACE,iCAASd,IACT,cAACT,EAAA,EAAD,UACG,gBAAGO,EAAH,EAAGA,QAAH,OACC,sBACEuB,QAAO,sBAAE,sBAAAC,EAAA,sEACDxB,EAAQ,CACZE,QACAD,QAAS,kDAHJ,uBAKDQ,IALC,2CADX,SASE,cAACgB,EAAA,EAAD,CACEL,MAAO,CAAEM,SAAU,OAAQC,MAAO,mBAM5C,oBAAGX,UAAU,iCAAb,UACE,iCAASJ,IACT,iCAASF,W,yBCjCXkB,E,4MACJC,MAAQ,CACNC,SAAS,G,EAEXrB,UAAY,SAACsB,GACX,EAAKrC,MAAMsC,QAAQD,I,kEAKnBE,KAAKvC,MAAMwC,gB,+BAEH,IAAD,SACsBD,KAAKvC,MAAlByC,GADT,EACCC,MADD,EACSD,UAChB,OACE,qBAAKnB,UAAU,yBAAf,SACImB,GACA,qBAAKnB,UAAU,+CAAf,SACGmB,EAASE,KAAI,SAACN,EAAMlB,GAAP,OACZ,cAAC,EAAD,CACEJ,UAAW,kBAAM,EAAKA,UAAUsB,IAEhCvB,QAASuB,GAHX,UAEUlB,EAFV,mB,GAnBYyB,IAAMC,WAuCjBC,uBARQ,SAACX,GAAD,MAAY,CACjCM,SAAUN,EAAMM,SAASM,KACzBL,MAAOP,EAAMa,KAAKN,UAEO,SAACO,GAAD,MAAe,CAC1CT,YAAa,kBAAMS,EAASC,gBAC5BZ,QAAS,SAACD,GAAD,OAAUY,EAAS3D,YAAc+C,QAE3BS,CAA6CZ","file":"static/js/9.e94fbd24.chunk.js","sourcesContent":["import * as types from \"./types\";\n\nexport const addItemToCart = (payload) => ({\n  type: types.ADD_TO_CART,\n  payload,\n});\nexport const deleteCartItem = (payload) => ({\n  type: types.DELETE_ITEM,\n  payload,\n});\n\nexport const IncreaseCartItem = (payload) => ({\n  type: types.INCREASE_CART_ITEM,\n  payload,\n});\nexport const DecreaseCartItem = (payload) => ({\n  type: types.DECREASE_CART_ITEM,\n  payload,\n});\nexport const submitUserOrder = (payload) => ({\n  type: types.SUBMIT_ORDER,\n  payload\n});\n\nexport const getTotal = () => ({\n  type: types.TOTAL_PRICE\n});\n","import { notification } from 'antd';\nexport const Notification = (props) => {\n  const [api, contextHolder] = notification.useNotification();\n\n  const openNotification = ({ message, title}) => {\n    api.success({\n      message: 'ADD ITEM',\n      description: `${title} ${message}`,\n      duration: 3,\n      placement: 'topRight',\n    });\n  };\n\n  return (\n      <>\n       {contextHolder}\n          {props.children({ notifiy: openNotification })}\n      </>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"antd\";\nimport { ShoppingCartOutlined } from \"@ant-design/icons\";\nimport \"./ProductCard.scss\";\nimport { Notification } from \"../notification/Notification\";\nconst ProductCard = ({ product, addToCart }) => {\n  const { price, image, category, title, id } = product;\n  return (\n    <Card\n      cover={\n        <Link to={`/products/${id}`} className=\"product-image\">\n          <img src={image} alt=\"product-image\" />\n        </Link>\n      }\n      bordered={true}\n      style={{ width: 300, margin: \"0 5px 5px 0\" }}\n    >\n      <p className=\"d-flex justify-content-between\">\n        <strong>{title}</strong>\n        <Notification>\n          {({ notifiy }) => (\n            <span\n              onClick={async () => {\n                await notifiy({\n                  title,\n                  message: \"Your Item Added Successfully To Shopping Cart\",\n                });\n                await addToCart();\n              }}\n            >\n              <ShoppingCartOutlined\n                style={{ fontSize: \"25px\", color: \"green\" }}\n              />\n            </span>\n          )}\n        </Notification>\n      </p>\n      <p className=\"d-flex justify-content-between\">\n        <strong>{category}</strong>\n        <strong>{price}</strong>\n      </p>\n    </Card>\n  );\n};\nexport default ProductCard;\n","import React from \"react\";\n\nimport ProductCard from \"../../components/productCard/ProductCard\";\nimport { allProductsRequest } from \"../../store/Product/actions\";\nimport { addItemToCart } from \"../../store/Cart/actions\";\nimport { connect } from \"react-redux\";\n\nclass ProductList extends React.Component {\n  state = {\n    disable: false,\n  };\n  addToCart = (item) => {\n    this.props.addItem(item);\n  };\n\n\n  componentDidMount() {\n    this.props.getProducts();\n  }\n  render() {\n    const { items , products } = this.props;\n    return (\n      <div className=\"product-list-container\">\n        { products && (\n          <div className=\"mt-2 d-flex flex-wrap justify-content-center\">\n            {products.map((item, id) => (\n              <ProductCard\n                addToCart={() => this.addToCart(item)}\n                key={`${id}-id`}\n                product={item}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nconst mapStateToProps= (state) => ({\n  products: state.products.data,\n  items: state.cart.items\n})\nconst mapDispatchToProps = (dispatch) => ({\ngetProducts: () => dispatch(allProductsRequest()),\naddItem: (item) => dispatch(addItemToCart(item))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList);\n"],"sourceRoot":""}